//GUSTAVO ADOLFO TABIMA - ANDRES FELIPE GARCIA BERNAL
//                      PROYECTO 2 LENGUAJES Y MÁQUINAS
using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
    lexer = createTransducer()
	 testLexer(lexer)
end
  
        

procedure testLexer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
	while true do
		print "----------------------------"
		print "Enter an input string: "
		string:=sc.nextLine()+" "   //We add a space (which is also a separator to the end of the string)
		result:=M.acceptsString(string)    
		tokenStream := M.getOutputString()
		print "The lexer did "+(result?"":"not ")+" accept the string."
		if result then print "Token Stream: "+ tokenStream end		
	end
end 

 


var names
  
function createTransducer():ITransducer begin
	
	Q:= {'I','R', "RO", "ROB" ,"ROBO", "ROBOT", "ROBOT_", "ROBOT_R" 
	,"V", "VA", "VAR", "VARS","VARSL",
	"B","BE","BEG","BEGI","BEGIN",
	"A","AS","ASI","ASIG","ASIGN","ASIGN:",
	"M","MO","MOV","MOVE","MOVE:","MOVE:N"
	,"T","TU","TUR","TURN","TURN:",
	"F","FA","FAC","FACE","FACE:",
	"P","PU","PUT","PUT;",
	"PI","PIC","PICK","PICK:",
	"MOVE: t","MOVE: TO"
	,"MOVE: TOT","MOVE: TOTH","MOVE: TOTHE",
	"MOVE: I","MOVE: IN","MOVE: IND","MOVE: INDI","MOVE: INDIR","MOVE: INDIR:"
	,"I","IF","IF:","T","TH","THE","THEN","THEN:","E","EL","ELS","ELSE","ELSE:",
	"W","WH","WHI","WHIL","WHILE","WHILE:",
	"D","DO","DO:","R","RE","REP","REPE","REPEA","REPEAT","REPEAT:",
	"T","TI","TIM","TIME","TIMES","TIMES:","FA","FAC","FACI","FACIN","FACING","FACING:","C","CA","CAN","CANP","CANPU","CANPUT","CANPUT:","CANPI","CANPIC","CANPICK","CANPICK:"
	,"CANM","CAMM","CANMOV","CANMOV:","CANMOVE","CANMOVE:","N","NO","NOT","NOT:","ERROR"}
	
	Σ:=('A'‥'Z') ∪ ('a' ‥ 'z') ∪ (':')∪ ('_') ∪ (' ')∪ (',')
	Out:={"RR","V(","B{","}E","As","Mo","to","Fa","T","n","s","e","w","Pu","Pi","toThe","inDir"} 
	q₀:='I'
	F:= {"E"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(q,σ) begin
if σ="" then return q
end
if σ="\n" then return q
if q='I' and σ='R' then return 'R'
elseif q='R' and σ='O' then return "RO"	 
elseif q="RO" and σ='B' then return "ROB"	 
elseif q="ROB" and σ='O' then return "ROBO"	 
elseif q="ROBO" and σ='T' then return "ROBOT"	 
elseif q="ROBOT" and σ='_' then return "ROBOT_"	 
elseif q="ROBOT_" and σ='R' then return "ROBOT_R"	 //aqui ya leyó robot
elseif q="ROBOT_R" and σ= 'V' then return "V"	 
elseif q="ROBOT_R" and σ= 'B' then return "B"			 
 //condiciones de lo que puede aparecer después de robot 
elseif q="V" and σ= 'A' then return "VA"
elseif q="VA" and σ= 'R' then return "VAR"
elseif q="VAR" and σ= 'S' then return "VARS"
elseif q="VARS" and σ ∈ ('a'‥'z') then return "VARSL"
elseif q="VARSL" and σ= ',' then return "VARS"
elseif q="VARS" and σ= 'B'  then return "B"
elseif q="B" and σ= 'E' then return "BE"  
elseif q="BE" and σ= 'G' then return "BEG"  
elseif q="BEG" and σ= 'I' then return "BEGI"  
elseif q="BEGI" and σ= 'N' then return "BEGIN"
elseif q="BEGIN" and σ= 'M' then return "M"
elseif q="M" and σ= 'O' then return "MO"
elseif q="MO" and σ= 'V' then return "MOV"
elseif q="MOV" and σ= 'E' then return "MOVE"
elseif q="MOVE" and σ= ':' then return "MOVE:" 
elseif q="MOVE:" and σ ∈('a'‥'z')∪('1'‥'9') then return "MOVE:N"
	//miro las opciones del move
elseif q="MOVE:N" then  	
if σ= 'I' then return "MOVE: I"//caso indir
elseif σ= 'T' then return "MOVE: T"//TOTHE
else return "BEGIN"  //vuelve al estado begin

end
end 
end

end

function g(q) begin
	return λ
end

function h(q,σ) begin
	var s: String
	s := λ
	if(q=="ROBOR_R") then return "gatito" end
	if q ∉ {"E σ ∉ {' '} then  s=String.valueOf(σ) end
		irr"} and σ ∈ {'(',')',' '} then
		if q=="I" then return s
    	elseif q=="plus" then return "+"+s 
   		elseif q=="times" then return "*"+s
		elseif q=="Num" then return "n"+s
		else return "v"+s
 		end
	else return  λ
	end
end
